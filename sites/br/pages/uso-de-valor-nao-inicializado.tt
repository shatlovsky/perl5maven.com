=title Uso de valor não inicializado
=timestamp 2013-03-20T23:45:56
=indexes undef, valor não inicializado, $|, alertas, buferização
=status show
=original use-of-uninitialized-value
=books beginner_book
=author szabgab
=translator fredlopes
=archive 1
=comments 1
=social 1

=abstract start

Esse é um dos alertas (warnings) mais comuns que você encontrará ao executar programas em Perl.

É só um alerta, que não fará seu programa parar, e será gerado apenas se a opção <hl>warnings</hl> estiver presente. O que é altamente recomendado.

A maneira mais comum de ligar os alertas é através da inclusão do comando <hl>use warnings;</hl> no começo de seu programa ou módulo.

=abstract end

O velho método é o de adicionar o parâmetro <hl>-w</hl> na primeira linha, que, em geral, se parece com essa:

<hl>#!/usr/bin/perl -w</hl>

Existem algumas diferenças, mas como <hl>use warnings</hl> está à disposição há mais de 12 anos, não há razão para evitá-lo. Em outras palavras:

Sempre <hl>use warnings;</hl>!

Vamos voltar agora ao alerta em questão.

<h2>Uma explicação rápida</h2>

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 6.
(Uso de valor não inicializado $x em say em perl_warning_1.pl linha 6.)
</code>

Isso significa que a variável <hl>$x</hl> não tem nenhum valor (seu valor é o valor especial <hl>undef</hl>).
Ou ela nunca teve um valor, ou em algum momento lhe foi atribuído o valor <hl>undef</hl>.

Você deveria dar um olhada quando a variável recebeu seu último valor, ou pelo menos tentar entender por que aquela parte do código nunca foi executada.

<h2>Um exemplo simples</h2>

O exemplo seguinte vai gerar o alerta em questão:

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
say $x;
</code>

Perl é muito legal, e irá nos dizer qual arquivo gerou o alerta, e em qual linha.

<h2>Somente um alerta</h2>

Como eu disse, isso é só um alerta. Se o programa tem mais comandos depois do <hl>say</hl>, eles serão executados:

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
say $x;
$x = 42;
say $x;
</code>

Isso vai imprimir

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 6.

42
</code>

<h2>Ordem confusa na saída</h2>

Tenha cuidado, no entanto, se seu código tem comandos antes da linha que gera o alerta, como neste exemplo:

<code lang="perl">
use warnings;
use strict;
use 5.010;

print 'OK';
my $x;
say $x;
$x = 42;
say $x;
</code>

O resultado pode ser confuso:

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 7.
OK
42
</code>

Aqui, o resultado do primeiro <hl>say</hl> é visto <b>depois</b> do alerta, mesmo se ele foi chamado <b>antes</b> do código que gerou o alerta.

Esse comportamento estranho é o resultado da <hl>buferização de ES (entrada e saída)</hl>. Por padrão, Perl buferiza STDOUT, o canal padrão de saída, mas não buferiza STDERR, o canal padrão de erros.

Assim, enquanto a palavra 'OK' espera pelo despejo do buffer, a mensagem de alerta já chega à tela.

<h2>Desligando a buferização</h2>

Para evitar isso, você pode desligar a buferização da STDOUT.

Isso é feito com o seguinte código: <hl>$| = 1;</hl> no começo do programa.

<code lang="perl">
use warnings;
use strict;
use 5.010;

$| = 1;

print 'OK';
my $x;
say $x;
$x = 42;
say $x;
</code>

<code>
OKUse of uninitialized value $x in say at perl_warning_1.pl line 7.
42
</code>

(O alerta fica na mesma linha de <b>OK</b> porque não acrescentamos uma nova linha <hl>\n</hl> depois do OK.

<h2>O escopo indesejado</h2>

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
my $y = 1;

if ($y) {
  my $x = 42;
}
say $x;
</code>

Esse código também produz <hl>Use of uninitialized value $x in say at perl_warning_1.pl line 11.</hl>

Consegui cometer esse engano várias vezes. Sem prestar atenção, usei <hl>my $x</hl> dentro do bloco <hl>if</hl>, o que significa que criei outra variável $x, atribuí 42 a ela e usei-a fora do escopo no fim do bloco. (O <hl>$y = 1</hl> serve apenas para guardar lugar para algum código de verdade em condições reais. Está aí apenas para fazer esse exemplo ficar um pouco mais realista.)

Existem, é claro, casos em que preciso declarar uma variável dentro de um bloco <hl>if</hl>, mas isso não acontece sempre. Quando o faço por engano, encontrar o erro torna-se uma atividade penosa.

