=title Perl Orientado a Objeto usando o Moose
=timestamp 2013-04-29T23:10:05
=indexes OOP, Moose, object oriented, class, object, instance, constructor, getter, setter, accessor
=status show
=original object-oriented-perl-using-moose
=books advanced_book
=author szabgab
=translator aramisf
=archive 1
=comments 1
=social 1

=abstract start

Nos próximos artigos nós vamos aprender como programar em Perl com Orientação a
Objetos.
Vamos começar com alguns exemplos simples e vamos extende-los passo a passo.
Começamos usando o Moose mas vamos também aprender como criar classes por
outros meios.

=abstract end

<h2>Um construtor com o Moose</h2>

Comecemos por escrever um script simples que usa a <hl>classe</hl> Person.
Não fazemos nada especial ainda, apenas carregamos o módulo e chamamos o
<hl>construtor</hl> para criar uma <hl>instância</hl>.

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;
my $teacher = Person->new;
</code>

Salve isto em somedir/bin/app.pl

Isto não deve ser novo para você, pois estou certo de que você já usou outros
módulos de maneira similar. Nosso foco é em como a classe Person foi
implementada:

<code lang="perl">
package Person;
use Moose;

1;
</code>

É isto.

Esse código é gravado em somedir/lib/Person.pm.

Tudo o que você precisa fazer para criar uma <hl>classe</hl> é criar um
<hl>pacote</hl> com o nome da classe, adicionar <hl>use Moose;</hl> a ele,
terminar o arquivo com um valor verdadeiro, e salvar em um arquivo com o mesmo
nome (sensível ao caso!) do pacote, e com a extensão .pm.

Carregar o Moose define automaticamente <hl>use strict</hl> e <hl> use
warnings</hl>.
Isto é legal, mas cuidado para não se acostumar com essa conveniência e
esquecer de usá-los quando não estiver usando o Moose.

Carregar o Moose também adiciona automaticamente o construtor padrão chamado
<hl>new</hl>.

Uma observação, em Perl não é um requisito que o construtor seja chamado new,
mas na maioria dos casos é o que o autor acaba escolhendo.


<h2>Atributos e acessores</h2>

Ter uma classe vazia não é muito divertido. Vamos avançar um pouco em nosso
uso:

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;
my $teacher = Person->new;

$teacher->name('Joe');
say $teacher->name;
</code>

Neste código, depois de criar o <hl>objeto</hl>, chamamos o <hl>método</hl>
"name" com uma string como parâmetro; isso define o <hl>atributo</hl> "name"
da classe como 'Joe'. Uma vez que este método define seu respectivo atributo, ele é
também chamado de <hl>setter</hl>.

Então chamamos o mesmo método novamente, desta vez sem parâmetro algum. Isto
vai buscar o valor previamente armazenado. Uma vez que obtém um valor, este
método também é chamado <hl>getter</hl>.

Em nosso caso o <hl>getter</hl> e o <hl>setter</hl> possuem o mesmo nome mas
isso também não é requisito.

Em geral <hl>getters<hl> e <hl>setters</hl> são chamados <hl>acessores</hl>.

O código que implementa a nova classe é este:

<code lang="perl">
package Person;
use Moose;

has 'name' => (is => 'rw');

1;
</code>

A parte nova, <hl>has 'name' => (is => 'rw');</hl> diz que

"A classe Person <hl>tem</hl> um atributo chamado <hl>'name'</hl> que tem as
<hl>permissões</hl> de leitura(<hl>r</hl>) e escrita(<hl>w</hl>)"

Isso cria automaticamente um método chamado "name" que se torna ao mesmo tempo
um setter (para escrita) e um getter (para leitura).

<h2>Execute o código</h2>

Com o intuito de executar este exemplo crie um diretório chamado "somedir",
com um subdiretório chamado "lib" dentro dele, e salve o arquivo Person.pm
dentro do subdiretório "lib". Crie também um subdiretório chamado "bin" e
salve lá o script chamado person.pl.

Você deve ter

<code>
somedir/lib/Person.pm
somedir/bin/person.pl
</code>

Abra um terminal (ou a janela do cmd no Windows), acesse o diretório "somedir"
e digite <hl>perl -Ilib bin/person.pl</hl>

(No MS Windows você pode precisar usar contra-barras: \ )

<h2>Parâmetros do construtor</h2>

No próximo script nós passamos um par chave-valor para o construtor,
correspondentes ao nome do atributo e seu valor.

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;

my $teacher = Person->new( name => 'Joe' );
say $teacher->name;
</code>

Isso também funciona com o mesmo módulo da mesma forma como tínhamos:

Usando o construtor dessa maneira para definir o valor inicial de um atributo
funciona sem fazer qualquer mudança no módulo Person.

O Moose aceita automaticamente todo <hl>membro</hl> (outro nome para os
atributos) a ser passado durante a construção.

