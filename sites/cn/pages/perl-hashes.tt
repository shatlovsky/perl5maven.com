=title 映射表（hashes）
=timestamp 2013-04-19T11:12:06
=indexes hash, keys, value, associative, %, =>, fat arrow, fat comma
=status show
=original perl-hashes
=books beginner_book
=author szabgab
=translator swuecho
=archive 1
=comments 1
=social 1

=abstract start


本节<a href="/perl-tutorial">Perl 教程</a> 中，我们学习哈希表<b>hashes</b>。

哈希表<b>hashes</b> 在其他编程语言中，又称做关联数组，词典，或者 映射表？。

它是Perl 中基本的数据结构之一，非常有用。

哈希表是音译，本人认为 映射（表） 是更好的翻译。所以，下文中，用映射（表）。

=abstract end


映射是键-值对的集合。键是字符串；值是标量，可以是数字，字符串，以及引用。关于引用，我们后面会详细讲解。

映射，也是用<hl>my</hl>关键词来声明。映射的标志符是 <hl>%</hl>。

有些人认为，映射和数组很像，（映射的另一个名字就是关联数组），他们的区别主要：第一，数组是有序的，元素是按顺序索引的。
第二，映射是无序的。你通过键值对中的键，来取得值。因此，不能有重复的键。

<h2>声明一个映射</h2>

<code lang="perl">
my %color_of;
</code>

<h2>填入键值对</h2>


<code lang="perl">
$color_of{'apple'} = 'red';
</code>

$color_of 是映射，'apple' 是键， 'red' 是值。




<code lang="perl">
my $fruit = 'apple';
$color_of{$fruit} = 'red';
</code>

请比较以上两个例子的区别。
如果键是一个变量，可以省略引号。

事实上，如果键是一个简单的字符串，也可以省略引号。

<code lang="perl">
$color_of{apple} = 'red';
</code>

你可能已经注意到了，如果你想表达的是一个键值对，标志符 <hl>$</hl>。原因估计你猜到了， 因为表达的是单数概念。

<h2>读取映射中一个键值对的值</h2>

<code lang="perl">
print $color_of{apple};
</code>


如果你所用的键不存在，映射会返回一个<a href="/undef-and-defined-in-perl">undef</a>，在<hl>warnings</hl>启用的情况下，Perl会给你
<a href="/use-of-uninitialized-value">warning about uninitialized value</a> 的警告。

<code lang="perl">
print $color_of{orange};
</code>

增添更多键值对到映射中，

<code lang="perl">
$color_of{orange} = "orange";
$color_of{grape} = "purple";
</code>

<h2>声明映射并赋值</h2>

<code lang="perl">
my %color_of = (
    "apple"  => "red",
    "orange" => "orange",
    "grape"  => "purple",
);
</code>

<hl>=></hl> 叫做 <b>胖箭头</b> 或者 <b>长逗号</b>, 用来隔开键值对的键和值。
Perl 中还有个<hl>-></hl>，叫做瘦箭头。

<hl>=></hl> 称作长逗号的原因是，它在这里的功能，其实是和逗号<hl>, </hl> 类似， 所以，上个例子也可以这样写：


<code lang="perl">
my %color_of = (
    "apple",  "red",
    "orange", "orange",
    "grape",  "purple",
);
</code>

Actually, the fat comma allows you to leave out the quotes on the left-hand side makig the code cleaner
and more readable.

不过，<hl>=></hl> 比逗号好些，因为，如果是长逗号，键的引号可以省略。

<code lang="perl">
my %color_of = (
    apple  => "red",
    orange => "orange",
    grape  => "purple",
);
</code>

<h2>给键赋值</h2>

赋值改变了原有键值对的值。

<code lang="perl">
$color_of{apple} = "green";
print $color_of{apple};     # green
</code>



<h2>映射的历遍</h2>

你需要知道键，然后才能读取值，如果你不知道，可以用 <hl>keys</hl>
函数来得到所有的键，放到数组中，然后再历遍数组即可。

<code lang="perl">
my @fruits = keys %color_of;
for my $fruit (@fruits) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>



其实，中间变量<hl>@fruits</hl> 并不是必须的。

<code lang="perl">
for my $fruit (keys %color_of) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>


<h2>映射的大小</h2>


映射的大小指的是映射中键-值对的数目，也就是键的数目就可以了。

<code lang="perl">
print scalar keys %hash;
</code>

<h2>致谢</h2>
本文最初是<a href="http://www.leprevost.com.br/">Felipe da Veiga Leprevost</a> 所写，他同时是本教程
<a href="http://br.perlmaven.com/">葡萄牙语</a>的译者。



