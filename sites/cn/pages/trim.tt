=title trim - 使用Perl删除前导和拖尾空白
=timestamp 2013-05-05T10:01:01
=indexes trim, ltrim, rtrim
=status show
=original trim
=books beginner_book
=author szabgab
=translator herolee
=archive 1
=comments 1
=social 1

=abstract start

其它一些编程语言中，有函数<b>ltrim</b>和<b>rtrim</b>分别用于从字符串开头和末尾删除空格和制表符。
也有的提供了函数<b>trim</b>来删除字符串两端的空白字符。

Perl里没这些函数因为简单的正则表达式替换就能实现这个目的（不过我确信CPAN有很多模块实现了这些函数）。

事实上这太简单了以至于成了<a href="https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality">帕金森琐碎定理</a>里的一个显著主题。

=abstract end

<h2>左侧整理</h2>

<b>ltrim</b>或者<b>lstrip</b>从字符串左侧删除空白字符：

<code lang="perl">
$str =~ s/^\s+//;
</code>

从字符串开头<hl>^</hl>开始匹配一个或者多个空白字符(<hl>\s+</hl>)，并将之替换成空字符。

<h2>右侧整理</h2>

<b>rtrim</b>或者<b>rstrip</b>从字符串右侧删除空白字符：

<code lang="perl">
$str =~ s/\s+$//;
</code>

匹配一个或者多个空白字符(<hl>\s+</hl>)直到字符串末尾(<hl>$</hl>)，并将之替换成空字符。

<h2>整理两端</h2>

<b>trim</b>删除字符串两端的空白字符：

<code lang="perl">
$str =~ s/^\s+|\s+$//g
</code>

将上面两个正则表达式用或记号<hl>|</hl>连起来，并在最后增加<hl>/g</hl>用以<b>全局</b>地执行替换操作（反复多次）。


<h2>封装在函数里</h2>

如果你不想在代码中看到这些结构，你可以在代码里添加这些函数：

<code lang="perl">
sub ltrim { my $s = shift; $s =~ s/^\s+//;       return $s };
sub rtrim { my $s = shift; $s =~ s/\s+$//;       return $s };
sub  trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };
</code>

使用时像这样：

<code lang="perl">
my $z = " abc ";
printf "<%s>\n", trim($z);   # <abc>
printf "<%s>\n", ltrim($z);  # <abc >
printf "<%s>\n", rtrim($z);  # < abc>
</code>


<h2>String::Util</h2>

要是实在不想拷贝那些东西，你可以安装一个模块。

例如<a href="https://metacpan.org/module/String::Util">String::Util</a>提供了函数<hl>trim</hl>，你可以如下使用：

<code lang="perl">
use String::Util qw(trim);

my $z = " abc ";
printf "<%s>\n", trim( $z );              # <abc>
printf "<%s>\n", trim( $z, right => 0 );  # <abc >
printf "<%s>\n", trim( $z, left  => 0 );   # < abc>
</code>

默认它整理两侧，你不需要提供参数。
我觉得，自己实现<hl>ltrim</hl>和<hl>rtrim</hl>会清晰些。

<h2>Text::Trim</h2>

另一个模块<a href="https://metacpan.org/module/Text::Trim">Text::Trim</a>提供了3个函数，但是它极度采纳了Perl风格的写法，可能到了有些危险的地步。

如果你调用它并将返回值用在print语句或者赋给一个变量，它会返回整理过的字符串，并保持原始字符串不变。

<code lang="perl">
use Text::Trim qw(trim);

my $z = " abc ";
printf "<%s>\n", trim($z);  # <abc>
printf "<%s>\n", $z;       # < abc >
</code>

另一方面，如果你在空白上下文调用它，亦即不使用返回值，trim函数就会修改参数，产生类似<a href="/perldoc/chomp">chomp</a>的行为。

<code lang="perl">
use Text::Trim qw(trim);

my $z = " abc ";
trim $z;
printf "<%s>\n", $z;       # <abc>
</code>