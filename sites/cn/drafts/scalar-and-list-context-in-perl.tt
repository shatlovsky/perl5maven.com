=title Perl 中的上下文
=timestamp 2013-04-10T11:45:56
=indexes scalar, list, array, size, length, context, Perl
=status show
=books beginner_book
=author szabgab
=transltor swuecho
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

本节 <a href="/perl-tutorial">Perl 教程</a> 我们学习Perl 中的上下文。

在英语中，有很多多义词，其他语言中也是这样。汉语更是如此。

我们能正确理解多义词的意义，因为我们并不是孤立的看一个词，而是根据某个词所在的语境来理这个词的意思。

Perl 也是如此，Perl 中的关键词，函数，以及一些表达式，在不同的语境中，可能有不同的意思。
这是Perl的独特之处，很多人喜欢，因为使语言变得简洁；也遭到不少人的诟病，因为容易造成混乱，尤其是对于初学者。

=abstract end

Perl 中的语境主要有两种，一是标量上下文，即单数的语境；二是列表上下文，可以理解为复数的语境。

<h2>复数（LIST）语境中的数组</h2>

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my @names = @words;
</code>

赋值之后，<hl>@names</hl> 和 <hl>@words</hl> 包含相同的元素，即在这里，赋值相当与复制。

<h2>单数语境（SCALAR ）中的数组</h2>

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my $people =  @words;
</code>


赋值后 <hl>$people</hl> 的值是 3。即在单数的语境中，得到的是数组中元素的个数。如果是在没有语境的语言中，
你需要用函数计算出数组的元素的个数。

<h2>单数语境（SCALAR ）和 复数（LIST）语境</h2>

//The above two are called SCALAR and LIST context. They mean if the expectation is
//to get a single value (in SCALAR context), or if multiple values are expected (LIST context).
//In LIST context the number of values can be 0, 1, 2, or any other number.

<h2> if 语句的语境 </h2>

看下面的例子：

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');

if (@words) {
   say "There are some words in the array";
}
</code>


if 语句的条件部分，是单数（SCALAR）语境，所以得到的是数组中元素的个数。
所以，这里if 语句实际上在检查数组是否有元素存在。如果你不是很明白，请参考
<a href="/boolean-values-in-perl">TRUE</a>。

在<a href="/the-year-19100">Perl中的时间</a>中，我们学习了<hl>localtime()</hl>函数，其实已经
接触了Perl 中的单复数语境了。这里我们又学习了单复数语境中的数组。

如果不确定一个函数的语境，请参考<a href="/core-perl-documentation-cpan-module-documentation">perldoc</a>。
正如，不知到一个词的意思要去查字典一样。

我们接下来经常用到的情况。

<h2>Creating SCALAR context</h2>

We already saw that no matter what you assign to a scalar variable that thing will be in SCALAR context.
Let's describe it this way:

<code>
$x = SCALAR;
</code>

Because individual elements of an array are also scalars, assignment to them also creates SCALAR context:

<code>
$word[3] = SCALAR;
</code>

Concatenation expects two strings on either side so it creates SCALAR context on both sides:

<code>
"string" . SCALAR;
</code>

but also

<code>
SCALAR . "string"
</code>

So

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
say "Number of elements: " . @words;
say "It is now " . localtime();
</code>

Will print

<code>
Number of elements: 3
It is now Thu Feb 30 14:15:53 1998
</code>

Numerical operators usually expect two numbers - two scalars - on either side.
So numerical operators create SCALAR context on both sides:

<code>
5 + SCALAR;

SCALAR + 5;
</code>

<h2>Creating LIST context</h2>

There are constructs that create LIST context:

Assignment to an array is one of them:

<code>
@x = LIST;
</code>

Assignment to a list is another place:

<code>
($x, $y) = LIST;
</code>

Even if that list only has one element:

<code>
($x) =  LIST;
</code>

That brings us to an important issue that can easily trick people:

<h2>When are the parentheses significant?</h2>

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

my ($x) = @words;
my $y   = @words;

say $x;
say $y;
</code>

the output is:

<code>
Foo
3
</code>

This is one of the few places where the parentheses are very important.

In the first assignment <hl>my ($x) = @words;</hl> we assigned
to a <b>list</b> of scalar variable(s).
That created LIST context on the right hand side. That means the <b>values</b>
of the array were copied to the list on the left hand side. Because there was only
one scalar, the first element of the array got copied and the rest not.

In the second assignment <hl>my $y   = @words;</hl> we assigned <b>directly</b> to
a scalar variable. That created SCALAR context on the right hand side. An array in
SCALAR context returns the number of elements in it.

<!--
This will be very important when you look at
<a href="http://perlmaven.com/subroutines-and-functions-in-perl">passing parameters to functions</a>
-->

<h2>Forcing SCALAR context</h2>

Both <hl>print()</hl> and <hl>say()</hl> create LIST context for their parameters.
So what if you would like to print the number of elements in an array?
What if you'd like to print the nicely formatted date that is returned by <hl>localtime()</hl>?

Let's try this:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

say @words;
say localtime();
</code>

And the output is

<code>
FooBarBaz
3542071011113100
</code>
The former is somehow understandable, these are the values in the array smashed together.

The second one is confusing. It is NOT the same as the result of the <hl>time()</hl>
function one might think. It is actually the 9 numbers returned by the <hl>localtime()</hl>
function in LIST context. If you don't remember, check it out in the episode about
<a href="/the-year-19100.html">the year of 19100</a>.

The solution is to use the <hl>scalar()</hl> function that  will create SCALAR context for its parameter.
Actually that's the whole job of the <hl>scalar()</hl> function. Some people might think about it as
<b>casting</b> from plural to singular, even though I think this word is not used often in Perl-land.

<code lang="perl">
say scalar @words;
say scalar localtime();
</code>

And the output will be:

<code>
3
Mon Nov  7 21:02:41 2011
</code>

<h2>数组的大小的另一种写法</h2>


你可能会碰到类似的代码：

<code lang="perl">
0 + @words;
</code>

它的目的是得到 <hl> @words </hl> 数组的大小，<hl> + </hl> 号的作用是提供 SCALAR 上下文。因为在
SCALAR 上下文中，数组返回其元素的个数，所以这样的代码是正确的。
不过，我喜欢用 <hl>scalar @words</hl> 来得到数组的大小 .<hl>scalar()</hl> 函数的作用是强加一个 SCALAR 上下文。


